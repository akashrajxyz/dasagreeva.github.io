#+TITLE: Elisp
#+SETUPFILE: https://blog.bugswriter.com/static/theme.setup

#+BEGIN_SRC emacs-lisp :results output
(file-name-extension "tring.org")
#+END_SRC

#+RESULTS:

* Basics

true ===> t, 0, "", []
false ===> nil, (), (empty), '()
and , or
/= not equal


string comaprision
(string-equal "abc" "abc")
(not (string-equal "abc" "abc")))


** (setq a 3 b 4 c 5)

(let (a,b)
(setq a 3)
(setq b 4)
(+ a b)
) ; last statemet return of local variable
** if
(if (< 3 2) 5 6) ;  6
** when
(when test expr1 expr2 …)
(if test progn ( exp1 exp2))
progn return last state ment in his body ( progn = {} )
** Loop
 (setq x 0)

(while (< x 4)
  (print (format "number is %d" x))
  (setq x (1+ x)))
* Basics
** Elisp Basics
**** printing
#+BEGIN_SRC emacs-lisp
; printing
(message "hi")

; printing variable values
(message "Her age is: %d" 16)        ; %d is for number
(message "Her name is: %s" "Vicky")  ; %s is for string
(message "My list is: %S" (list 8 2 3))  ; %S is for any lisp expression
#+END_SRC
**** Convert Float/Integer
#+BEGIN_SRC emacs-lisp
;; int to float
(float 3) ; 3.0

(truncate 3.3) ; 3

(floor 3.3) ; 3

(ceiling 3.3) ; 4

(round 3.4) ; 3

#+END_SRC
**** True/False
#+BEGIN_SRC emacs-lisp
;; all the following are false. They all evaluate to nil
(if nil "yes" "no") ;  "no"
(if () "yes" "no") ;  "no"
(if '() "yes" "no") ;  "no"
(if (list) "yes" "no") ;  "no", because (list) eval to a empty list, same as ()




(if t "yes" "no") ;  "yes"
(if 0 "yes" "no") ;  "yes"
(if "" "yes" "no") ;  "yes"
(if [] "yes" "no") ;  "yes". The [] is vector of 0 elements
#+END_SRC
**** Boolean Functions
#+BEGIN_SRC emacs-lisp
(and t nil) ; nil
(or t nil) ; t
(and t nil t t t t) ; nil
;;;;;;;;;;;;;;;;;;;;;;;;;;;;Comapiring number
(< 3 4) ; less than
(> 3 4) ; greater than

(<= 3 4) ; less or equal to
(>= 3 4) ; greater or equal to

(= 3 3)   ;  t
(= 3 3.00000000000000001) ;  t

(/= 3 4) ; not equal. ⇒ t
;;;;;;;;;;;;;;;;;;;;String
;; compare string
(equal "abc" "abc") ;  t

;; dedicated function for comparing string
(string-equal "abc" "abc") ;  t

(string-equal "abc" "Abc") ;  nil. Case matters

;; can be used to compare string and symbol
(string-equal "abc" 'abc) ;  t
;;;;;;;;;;;;;;;;; Equal
;; test if two values have the same datatype and value.

(equal 3 3) ;  t
(equal 3.0 3.0) ;  t

(equal 3 3.0) ;  nil. Because datatype doesn't match.

;; test equality of lists
(equal '(3 4 5) '(3 4 5))  ;  t
(equal '(3 4 5) '(3 4 "5")) ;  nil

;; test equality of strings
(equal "e" "e") ;  t

;; test equality of symbols
(equal 'abc 'abc) ;  t
;;;;;;;;;;;;;;;;;;

(not (= 3 4)) ;  t
(/= 3 4) ;  t. “/=” is for comparing numbers only

(not (equal 3 4)) ;  t. General way to test inequality.


(setq x 1) ; assign 1 to x
(setq a 3 b 2 c 7) ; multiple assignment

(let (a b)
 (setq a 3)
 (setq b 4)
 (+ a b)
) ;  7

(let ((a 3) (b 4))
 (+ a b)
) ;  7

#+END_SRC
**** if then else
#+BEGIN_SRC emacs-lisp
(if (< 3 2) 7 8 ) ; 8

;; no false expression, return nil
(if (< 3 2) (message "yes") ) ; nil
;;;;;; (when test exp1 exp2)
;;;; (if test (progn  expr1 expr2))

#+END_SRC
**** Loop
#+BEGIN_SRC emacs-lisp
(setq x 0)

(while (< x 4)
  (print (format "number is %d" x))
  (setq x (1+ x)))

#+END_SRC

**** Define a function
#+BEGIN_SRC emacs-lisp
(defun myFuntion ()
"testing"
(message 'yay!@')
;;;;;; Eval Expression C-x C-e
;;;;;;;;;;;;;;;;;;;; execute C-c C-c

#+END_SRC
** ELisp Text-Processing overview
*** Cursor Position
#+BEGIN_SRC emacs-lisp
;; current cursor position is called “point”.
;; Left of first char in buffer is 1
;; This returns the current cursor position
(point)

;; returns the position of the beginning/end of region (selection)
(region-beginning)
(region-end)

;; position for beginning/ending of current line
(line-beginning-position)
(line-end-position)

;; returns the position for the beginning/end of buffer, taking account of narrow-to-region
(point-min)
(point-max)
#+END_SRC
*** Move Cursor, Search Text
#+BEGIN_SRC emacs-lisp
;; move cursor to position 39
(goto-char 39)

;; move cursor by 4 chars
(forward-char 4)
(backward-char 4)

;; move cursor to the location of a string
;; returns the new position
(search-forward "some") ; to end of “some”
(search-backward "some") ; to beginning of “some”

;; move cursor to the location matched by a regex
;; returns the new position
(re-search-forward "[0-9]") ; digit
(re-search-backward "[0-9]")

;; move cursor to the first char that's not “a to z”
;; Returns the distance traveled.
(skip-chars-forward "a-z")
(skip-chars-backward "a-z")
#+END_SRC
*** Delete, insert, change, Text
#+BEGIN_SRC emacs-lisp
;; delete 9 chars starting at current cursor pos
(delete-char 9)

;; deleting text from pos 3 to 10
(delete-region 3 10)

;; insert string at current cursor position
(insert "i ♥ cats")

;; get the string from pos 71 to 300
(setq x (buffer-substring 71 300))

;; capitalize letters in a region
(capitalize-region 71 300)

#+END_SRC
*** String
#+BEGIN_SRC emacs-lisp
;; length
(length "abc")
; returns 3

;; substring
(substring "abcdefg" 3 4)
; returns "d"

;; change a given string using regex
(replace-regexp-in-string "[0-9]" "X" "abc123")
;; returns "abcXXX
#+END_SRC
*** Buffer
#+BEGIN_SRC emacs-lisp
;; return the name of current buffer
(buffer-name)

;; return the full path of current file
(buffer-file-name)

;; switch to the buffer named xyz
(set-buffer "xyz")

;; save current buffer
(save-buffer)

;; close a buffer named xyz
(kill-buffer "xyz")

;; temporarily sets a buffer as current to work with
(with-current-buffer "xyz"
  ;; do something here. delete/insert text, etc.
#+END_SRC
*** File
#+BEGIN_SRC emacs-lisp
;; open a file (in a buffer)
(find-file "~/")

;; same as “Save As”.
(write-file path)

;; insert file into current position
(insert-file-contents path)

;; append a text block to file
(append-to-file start-pos end-pos path)

;; renaming file
(rename-file file-name new-name)

;; copying file
(copy-file old-name new-name)

;; deleting file
(delete-file file-name)

;; get dir path
(file-name-directory full-path)

;; get filename part
(file-name-nondirectory full-path)

;; get filename's suffix
(file-name-extension file-name)

;; get filename sans suffix
(file-name-sans-extension file-name)
#+END_SRC
*** Simple Example
#+BEGIN_SRC emacs-lisp
(defun insert-p-tag ()
  "Insert <p></p> at cursor point."
  (interactive)
  (insert "<p></p>")
  (backward-char 4))
#+END_SRC
** Elisp Examples
*** Insert Text
#+BEGIN_SRC emacs-lisp
(defun insert-p-tag ()
  "Insert <p></p> at cursor point."
  (interactive)
  (insert "<p></p>")
  (backward-char 4))
#+END_SRC
*** insert around region
#+BEGIN_SRC emacs-lisp
(defun wrap-markup-region ()
  "Insert a markup <b></b> around a region."
  (interactive)
  (save-excursion
    (goto-char (region-end))
    (insert "</b>")
    (goto-char (region-beginning))
    (insert "<b>")))
#+END_SRC
*** Select current Word
#+BEGIN_SRC emacs-lisp
;; turn on highlight selection
(transient-mark-mode 1)

(defun select-current-word ()
  "Select the word under cursor.
“word” here is considered any alphanumeric sequence with “_” or “-”."
  (interactive)
  (let (pt)
    (skip-chars-backward "-_A-Za-z0-9")
    (setq pt (point))
    (skip-chars-forward "-_A-Za-z0-9")
    (set-mark pt)))
#+END_SRC
*** Select Current Line
#+BEGIN_SRC emacs-lisp
;; turn on highlight selection
(transient-mark-mode 1)

(defun select-current-line ()
  "Select the current line"
  (interactive)
  (let ((pos (line-beginning-position)))
    (end-of-line)
    (set-mark pos)))
#+END_SRC
*** Find Replace String in Region
#+BEGIN_SRC emacs-lisp
(defun replace-greek-region ()
  "Replace “alpha” to “α” and other greek letters in current region."
  (interactive)
  (let (
        (p1 (region-beginning))
        (p2 (region-end)))
    (save-restriction
      (narrow-to-region p1 p2)
      (goto-char (point-min))
      (while (search-forward " alpha" nil t)
        (replace-match " α" nil t))
      (goto-char (point-min))
      (while (search-forward " beta" nil t)
        (replace-match " β" nil t))
      (goto-char (point-min))
      (while (search-forward " gamma" nil t)
        (replace-match " γ" nil t)))))
#+END_SRC
*** delete enclosed text
#+BEGIN_SRC emacs-lisp
(defun delete-enclosed-text ()
  "Delete texts between any pair of delimiters."
  (interactive)
  (save-excursion
    (let (p1 p2)
      (skip-chars-backward "^([<>“")
      (setq p1 (point))
      (skip-chars-forward "^)]<>”")
      (setq p2 (point))
      (delete-region p1 p2))))
#+END_SRC
** Delete Linebreaks
#+BEGIN_SRC emacs-lisp
(defun remove-line-breaks ()
  "Remove line endings in current paragraph."
  (interactive)
  (let ((fill-column (point-max)))
    (fill-paragraph nil)))
#+END_SRC
*** Random Number
#+BEGIN_SRC emacs-lisp
(random 99999)
#+END_SRC

*** Reference LookUP
#+BEGIN_SRC emacs-lisp
(defun word-definition-lookup ()
"Look up the word under cursor in a browser."
 (interactive)
 (browse-url
   (concat "http://www.answers.com/main/ntquery?s=" (thing-at-point 'sentence))))
#+END_SRC
*** Change Newline Character
#+BEGIN_SRC emacs-lisp
(defun to-unix-eol (fPath)
  "Change file's line ending to unix convention."
  (interactive)
  (let ((myBuffer (find-file fPath)))
    (set-buffer-file-coding-system 'unix) ; or 'mac or 'dos
    (save-buffer)
    (kill-buffer myBuffer)))
#+END_SRC

#+RESULTS:
: to-unix-eol
*** Delete Currente File
#+BEGIN_SRC emacs-lisp
(defun delete-current-file ()
  "Delete the file associated with the current buffer.
Delete the current buffer too.
If no file is associated, just close buffer without prompt for save."
  (interactive)
  (let ((currentFile (buffer-file-name)))
    (when (yes-or-no-p (concat "Delete file?: " currentFile))
      (kill-buffer (current-buffer))
      (when currentFile
        (delete-file currentFile)))))

#+END_SRC
*** Insert Vertical Column of Numbers
#+BEGIN_SRC emacs-lisp
(defun insert-column-counter (n)
  "deocjdkfjdkf.............."
  (interactive "nEnter the max integer: ")
  (let ((i 1) colpos)
    (setq colpos (- (point) (line-beginning-position)))
    (while (<= i n)
      (insert (number-to-string i))
      (forward-line)
      (beginning-of-line)
      (forward-char colpos)
      (setq i (1+ i))
      )
    )

  )
#+END_SRC
** Evaluate Elisp Code
eval-buffer
eval-region
** Doc lookUp
*** LookUp Function Doc String
you can use * in Describe Functions
** Search Doc
- search command ===> C-h a
- search command and function ====> C-u C-h a
- M-x : apropos-variable
- M-x : apropos - value
- To find function documentation M-x : emacs -index-search

* Basic Funtions
** Get Cursor Position
- point
- save-excursion
- re-serach-forward
- search-backward
- skip-chars-backward
- beginning-of-line
- end-of-line
- region-beginning
- goto-char
- forward-char
** Text Editing
- delete-char
- delete-region
- erase-buffer
- delete-and-extract-region
** String Functions
- (match-string 1 myhStr)  ======> match-data
- replace-regexp-in-string myRegex myreplacement mystr
- (split-string 'xy_007_cat' "_")
- string to number
- number-to-string
- string-join
- concat
- string-trim, left, right
- string-reverse ==========>  (require 'subr-x)
- format
***** String to Buffer
If you got a big string already somehow, you can put into a buffer by using with-temp-buffer, then insert your string, process it, then use buffer-string to get the whole buffer content.
#+BEGIN_SRC emacs-lisp
;; process string in a temp buffer

(with-temp-buffer
  (insert bigString)

  (goto-char (point-min))

  ;; code to manipulate string. eg delete char, etc

  ;; return whole buffer string
  (buffer-string))
#+END_SRC
** Buffer
- buffer-name
- buffer-file-name (full path of the file)
- set-buffer
*** Switch Buffer
with-current-buffer → temporarily make a buffer current.

Most of the time, you want to use this. Because it takes care of switching back to the original buffer when the function is done.
#+BEGIN_SRC emacs-lisp
;; make myBuf current temporarily
(with-current-buffer myBuf
  ;; code to edit text here
)
(save-current-buffer

  ;; switch to myBuf
  (set-buffer myBuf)

  ;; do stuff, such as insert/delete text
  )
#+END_SRC
*** Create Buffer
- with-temp-buffer
  (with-temp-buffer &rest BODY)
  Create a temporary buffer, and evaluate BODY there like progn.
- geneerate-new-buffer
  Create and return a buffer with a name based on NAME. Buffer name is created by calling generate-new-buffer-name.
- get-buffer-create
  ()Returns the buffer, but doesn't make it current. use set-buffer to make it current.
- kill buffer
** File
*** Open File
(find-file FILENAME &optional WILDCARDS)
*** wrtie file
(write-region start end filename-created &optional Append visit loackname mustbenew)
(save-buffer)
(write-file '~/new.txt')
*** Append File
(append-to-file 100 200 "~/test.txt") ------> current-buffer positions saves to file
*** Close File
kill-buffer
*** Create New File
find-file FILENAME  &Optional WILDCARDS
#+BEGIN_SRC emacs-lisp
(setq newBufName " xyz")

;; create a new buffer, save it to a var, so later you can switch to it or kill it
(setq newBuf (generate-new-buffer newBufName))

;; make it current (but does not make it visible), so all insert etc operations works on it.
(set-buffer newBuf)

;; like “Save As”. Save current buffer, close it, and open the new saved
(write-file "~/new.txt")

;; close it
(kill-buffer newBuf)
#+END_SRC
*** with-temp-file
with-temp-file → (with-temp-file FILE BODY).

Create a new buffer, make it current, evaluate BODY, and write the buffer to FILE. The value returned is the value of the last form in BODY.
#+BEGIN_SRC emacs-lisp
;; create a file with text hello

(with-temp-file "test.txt"
  (insert "hello"))
#+END_SRC
* File/Dir Path
*** Function on File
- set-files-modes
- file-exists-p
#+BEGIN_SRC emacs-lisp
(rename-file "/home/joe/test1.txt" "/home/joe/test2.txt")

(copy-file "/home/joe/test1.txt" "/home/joe/test2.txt")

(delete-file "/home/joe/test2.txt")
#+END_SRC
*** Functions on Directory
- firectory-files
- make-directory
- delete-directory
- copy-directory
#+BEGIN_SRC emacs-lisp
(defun make-backup ()
  "Make a backup copy of current buffer's file.
Create a backup of current buffer's file.
The new file name is the old file name with trailing “~”, in the same dir.
If such a file already exist, append more “~”.
If the current buffer is not associated with a file, its a error."
  (interactive)
  (let ((fName (buffer-file-name))
         backupName )
    (if (not fname)
        (error "current buffer is not a file." )
      (progn
        (setq backupName (concat fName "~"))
        (while (file-exists-p backupName)
          (setq backupName (concat backupName "~")))
        (copy-file fName backupName t)
        (message (concat "Backup saved as: " (file-name-nondirectory backupName)))))))
#+END_SRC
*** File Path Functions
#+BEGIN_SRC emacs-lisp
;; get the dir path part

(file-name-directory "/home/joe/xyz.txt") ; "/home/joe/"

;; get filename part
(file-name-nondirectory "/home/joe/xyz.txt") ; "xyz.txt"

;; get filename's extension
(file-name-extension "/home/joe/cat.txt.jpg") ; "jpg"

;; get filename without extension
(file-name-sans-extension "/home/joe/cat.txt.jpg") ; "/home/joe/cat.txt"

;; get relative path
(file-relative-name "/home/joe/b/cat.jpg" "/home/joe/") ; "b/cat.jpg"

;; get full path
(expand-file-name "test.el")
;; sample output
;; "/home/joe/misc/emacs/test.el"
#+END_SRC
