#+TITLE: Fast Api

* Request Body
#+BEGIN_SRC python
from typing import Optional


from fastapi import FastAPI
from pydantic import BaseModel


class Item(BaseModel):
    name: str
    description: Optional[str] = None
    price: float
    tax: Optional[float] = None


app = FastAPI()


@app.put("/items/{item_id}")
async def create_item(item_id: int, item: Item, q: Optional[str] = None):
    result = {"item_id": item_id, **item.dict()}
    if q:
        result.update({"q": q})
    return result

#+END_SRC
Request body + path + query parameters
* Query Paramete and String Validations
#+BEGIN_SRC python
def read_items(q: Optional[str] = Query(None, max_length=50)):
q: Optional[str] = Query(None, min_length=3, max_length=50, regex="^fixedquery$"
async def read_items(q: str = Query(..., min_length=3)):
q: Optional[str] = Query(
        None,
        alias="item-query",
        title="Query string",
        description="Query string for the items to search in the database that have a good match",
        min_length=3,
        max_length=50,
        regex="^fixedquery$",
        deprecated=True,
    )
#+END_SRC
* Path and Query
Path(..., title, description, ge, gt, max_length)
- * for kwargs default error failure
*  wve
